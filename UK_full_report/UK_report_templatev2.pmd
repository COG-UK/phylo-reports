```python, echo=False, name='define_paths'
import os

#default is current working directory
#this will come in here and also in the pweave call
input_directory = "" ##CHANGE

metadata_file = "" ##CHANGE

name_stem="" ##CHANGE

week = "" ##CHANGE

sequencing_centre = "" ##CHANGE

adm1 = "" ##CHANGE

pillar2 = "" ##CHANGE

fd = "figures"
summary_output = "" ##CHANGE
scripts_directory = "" ##CHANGE

adm2_cleaning_file = "%s/utils/mapping_files/adm2_cleaning.csv" % scripts_directory

```

```python, echo=False,name='import_dependencies'
import matplotlib.pyplot as plt
from collections import defaultdict
from collections import Counter
import pandas as pd
import os
from tabulate import tabulate
import imp
import warnings
warnings.filterwarnings("ignore")

import matplotlib as mpl
import matplotlib.font_manager as font_manager

font_list = font_manager.fontManager.addfont("%s/utils/helveticaneue/HelveticaNeue.ttf" % scripts_directory)
#font_list = font_manager.fontManager.addfont("%s/utils/helveticaneue/HelveticaNeueBD.ttf" % scripts_directory)

mpl.rcParams['font.family'] = 'helveticaneue'
mpl.rcParams['font.weight']=1000
mpl.rcParams['axes.labelweight']=300
mpl.rcParams['font.size']=15

plt.rcParams.update({'figure.max_open_warning': 0})

import UK_full_report.utils.basic_descriptions as descrip
import UK_full_report.utils.make_uk_introduction_trees as tree_func
import UK_full_report.utils.descriptive_plots as dp
import UK_full_report.utils.case_definitions as case_defs
import UK_full_report.utils.time_functions as time
import UK_full_report.utils.data_parsing as parse
import UK_full_report.utils.lineage_exploration as lin_exp
import UK_full_report.utils.writing_summary_files as writing
import UK_full_report.utils.mapping as map

```

```python,name='get title', results='raw', echo=False
if sequencing_centre != "":
    print("# Lineages report for " + sequencing_centre)
elif sequencing_centre == "" and adm1 != "":
    if adm1 == "Northern_Ireland":
        print("# Lineages report for Northern Ireland")
    else:
        print("# Lineages report for " + adm1)
else:
    print("# UK Lineages report")
```

```python, name='prepping things and prelim info',echo=False, results='tex'

sc_dict = {"PHEC":"England","LIVE":"England", "BIRM":"England", "PHWC":"Wales","CAMB":"England","NORW":"England","GLAS":"Scotland","EDIN":"Scotland","SHEF":"England","EXET":"England","NOTT":"England","PORT":"England","OXON":"England","NORT":"England","NIRE":"Northern_Ireland","LOND":"England", "SANG":"England"}

if sequencing_centre != "":
    country = sc_dict[sequencing_centre]
else:
    country = adm1

if pillar2 == "True":
    pillar2 = True 
else:
    pillar2 = False

current_date = time.make_current_week(week)

intro_bigs, intro_smalls, intro_alls, intro_countries, intro_object_dict, omitted, taxa, new_lineages, taxon_dictionary, most_recent_sample, intro_int_list, unclear_taxa, max_intros, min_intros, lineage_version, country_specific_lineages, country_specific_taxa, specific_min, specific_max, specific_smalls, specific_bigs, specific_singletons = parse.parse_metadata(metadata_file, sequencing_centre, country, pillar2)
singletons_count, smalls_count = descrip.get_preliminary_info(intro_countries)


if sequencing_centre != "":
    print("This report gives summaries of UK specific lineages sequenced by " + sequencing_centre + " for week " + week + ". ")
elif sequencing_centre == "" and country != "":
    if country == "Northern_Ireland":
        print("This report gives summaries of lineages sampled in Northern Ireland for week " + week + ". ")
    else:
        print("This report gives summaries of lineages sampled in " + country + " for week " + week + ". ")
elif pillar2:
    print("This report summarises pillar 2 sequences for week " + week + ". ")
else:
    print("This report gives summaries of UK specific lineages for week " + week + ". ")

print("There are time lags due to batching, curation and analysis, the most recently sampled sequence is " + str(most_recent_sample) + ". The analysis (eg time since last sample) is therefore undertaken from this date.")

print("<br/>")

if sequencing_centre != "":
    print(str(len(taxa)) + " sequences in the UK from the sequencing centre " + sequencing_centre + " have been included in this analysis.")
elif sequencing_centre == "" and country != "":
    print(str(len(country_specific_taxa)) + " sequences from " + country + " have been included in this analysis.")
    print(str(len(country_specific_lineages)) + " lineages have been recorded, " + str(specific_singletons) + " of which only contain one sequence.")
else:
    print(str(len(taxa)) + " sequences in the UK have been included in this analysis.")

    print(str(len(intro_countries)) + " lineages have been recorded, " + str(singletons_count) + " of which only contain one sequence.")
```

A few notes: the size of a lineage may be due to a low amount of transmission of this lineage, but it is likely also that it just hasn't been sampled as frequently, especially for newer lineages.
It's also important to realise that these lineages are *estimates* of how we think the virus is spreading in the UK after being introduced from abroad, as the low evolutionary rate of the virus makes it difficult to separate lineages with certainty.

```python, name="min and max bounds", echo=False, results='tex'
if sequencing_centre == "" and country != "":
     print("The minimum number of introductions is " + str(len(specific_min)) + " and the maximum is " + str(len(specific_max)))
else:
    print("The minimum number of introductions is " + str(len(min_intros)) + " and the maximum is " + str(len(max_intros)))
```

Sequences which were replicates or too error-prone were removed from this analysis.

```python, echo=False, results='tex'
if sequencing_centre == "" and country != "":
    print(str(len(specific_smalls)) + " are lineages which were sampled less than five times in " + country + ", and so have been left out of visualisation in the interests of clarity")
else:
    print(str(smalls_count) + " are lineages which only contained five sequences or fewer, and so have been left out of visualisation in the interests of clarity")
```

Furthermore, those sequences which haven't been sampled in the last month are not shown.

```python, echo=False, name='status description', results='tex'

if sequencing_centre == "" and country != "":
    status_counts, reactivated_lineages, continuining_lineages = lin_exp.describe_lineages(specific_bigs)
else:
    status_counts, reactivated_lineages, continuining_lineages = lin_exp.describe_lineages(intro_bigs)

reactivateds = status_counts["Reactivated"]
actives = status_counts["Reactivated"] + status_counts["Continuing"]
continuous = status_counts["Continuing"]
pendings = status_counts["Pending extinction"]
extincts = status_counts["Extinct"]
quiets = status_counts["Gone quiet"]

if sequencing_centre == "" and country != "":
     print("Of the " + str(len(country_specific_lineages) - len(specific_smalls)) + " that remain:")
else:
    print("Of the " + str(len(intro_alls) - len(intro_smalls)) + " that remain:")

if pendings > 0:
    if pendings == 1:
        print(str(pendings) + " is pending extinction ie last seen three weeks ago.")
    else:
        print(str(pendings) + " are pending extinction, ie last seen three weeks ago.")


if extincts > 0:
    if extincts == 1:
        print(str(extincts) + " has not been seen for more than one month, and so is viewed as extinct, but will continue to be monitored.")
    else:
        print(str(extincts) + " have not been seen for more than one month, and so are viewed as extinct, but will continue to be monitored.")

if quiets>0:
    if quiets == 1:
        print(str(quiets) + " has gone quiet, ie hasn't been seen this week.")
    else:
        print(str(quiets) + " lineages have gone quiet, ie haven't been seen this week.")

if reactivateds > 0:
    if reactivateds == 1:
        print(str(reactivateds) + " has reactivated.")
    else:
        print(str(reactivateds) + " lineages have reactivated.")

if continuous > 0:

    if continuous == 1:
        print(str(continuous) + " lineage has been continuously circulating.")
    else:
        print(str(continuous) + " lineages have been continuously circulating.")

```


The following table contains information about the ten largest lineages lineages and the number of sequences the dataset. Information about other lineages is found in the appendix, along with the raw data for all of the other figures.


Each entry is the count of sequences from each lineage in each country, with the percentage of the total sequences from that lineage that this count represents.

"Activity score" is calculated by taking the average gap between sampling for each lineage, and dividing it by the number of days since the lineage was last sampled. Therefore the higher the number, the more active the lineage is.
If the score is above 1, then it has been sampled *more* recently than expected given its average gap size. We might interpret this as an increase in activity.
If the score is below 1, it has been sampled *less* recently than expected given its average gap size, so we might interpret this as a decrease in activity.

```python, name="print lineage version", echo=False, results='tex'
print("The global lineages are correct as of the data release on " + lineage_version)
```

It is written to "summary_files" as "lineage_summary.tsv" for further use, and the full list of lineages is available in the same directory as "all_lineages.csv"

```python, name="dataframe fun", echo=False, results='tex'
if sequencing_centre == "" and country != "":

    dataframe,tree_order = descrip.make_country_specific_dataframe(country_specific_lineages,country, most_recent_sample)

else:
    intro_country_counts, intro_country_percentages, intro_country_together = descrip.prep_dicts(intro_countries)
    dataframe, tree_order = descrip.make_dataframe(intro_country_together, intro_object_dict)

print(dataframe.head(10).to_markdown(tablefmt='grid'))
```

These data is represented in the figure one. Note that the number of sequences is likely to be due more to differing sampling efforts in different regions, rather than genuine differences in numbers of cases. 

The raw data for this bar chart are in the table above.

```python, name="stacked_bars_by_country", echo=False, include=True, figure=True, caption="Number of sequences sampled in a lineage by country"

#df_counts, df_thinned, df_acctrans_counts = dp.make_plotting_dfs(intro_country_counts, intro_object_dict) #these are never actually used any more

dp.plot_bars(intro_bigs, country, sequencing_centre)

```

Different sequencing centres have different delays in turn around from receipt of samples to submission of sequence data. 
This will affect all of the figures shown after this if lineages have geographical variation, as some regions have less up to date data.

```python, name="lag_fig", include=True, echo=False, figure=True, caption="Lag since the most recent sequence from each sequencing centre to most current date"


if sequencing_centre == "" and not pillar2 and country != "Wales" and country != "Northern_Ireland":
    lag_dict, lags = dp.sequencing_centre_lags(taxa, sc_dict, current_date, country)
elif sequencing_centre != "":
    print("The lag for this sequencing centre is " + str(lags[sequencing_centre]) + " days")

```

The relative growth and decline of the ten most sampled lineages in terms of number of counties they are present in is shown in figure three. 


```python,name="geog_plot", echo=False, include=True , figure=True, caption="Lineages by number of adm2 regions present by epiweek"
if not pillar2:
    y_dict, week_list = dp.prep_geog_data(intro_bigs, country, sequencing_centre)
    dp.plot_ridge_plot(week_list, y_dict)
    raw_geog = dp.make_raw_data_geog_plot(y_dict, week_list)
```

```python, name="diversity_plot", echo=False, results='raw'
if sequencing_centre == "" and country == "" and not pillar2:
    print("The growth and decline of diversity of lineages over time for each country is shown in the ridge plot in figure four.") 
    print("This is represented by the Shannon Diversity, calculated using the number of sequences from each country from each lineage.")
```

```python, name="diversity_plot", echo=False, include=True, figure=True, caption="Shannon diversity of lineages in each adm1 region"
if sequencing_centre == "" and country == "" and not pillar2:
    div_df = dp.make_diversity_plot(intro_alls, taxa)
```

These lineages are shown on the timeline. Each line represents the length of the cluster, from oldest to most recent sampling date.
The dots are sized by the number of sequences taken on that date, and again are colour coded by country.
The raw data has been written to a summary file.

```python, name="make_timeline", echo=False, results='tex', include=True, figure=True, caption="Timeline of lineages, sized by number of sequences from each country."
dp.make_timeline(intro_bigs, sequencing_centre, country)
timeline_df = dp.raw_data_timeline(intro_bigs)
```

```python, name="clarifying_text", echo=False, results='tex'
if sequencing_centre == "" and not pillar2:
    print("The date of first sequence in the cluster is shown in figure five for every cluster with date information.")
if sequencing_centre == "" and country != "":
    print("NB the lineage may have started anywhere in the UK, but has been recorded at least once in " + country)
elif sequencing_centre != "":
    print("The date of first sequence in the cluster sampled by " + sequencing_centre + " is shown in figure five for every cluster with date information.")
if pillar2:
    print("The date of first sequence in the cluster sampled by a pillar 2 lab is shown in figure five for every cluster with date information.")
```

```python,name="firsts_plot", echo=False, include=True, figure=True, caption="Lineage starts per week, split by singletons and non-singletons"
if sequencing_centre == "" and country != "":
    multi, single = dp.plot_starts(country_specific_lineages)
    starts_raw = dp.raw_data_starts(single, multi)
else:
    multi, single = dp.plot_starts(intro_alls)
    starts_raw = dp.raw_data_starts(single, multi)
```
For comparison, here is a plot of the day that every sequence was taken, coloured by country. Note that sequences without dates were not included.

```python, name="seqs_over_time", echo=False, include=True, figure=True, caption="Sequences taken on each day by country"
if sequencing_centre == "" and country != "":
    date_counts = dp.plot_sequences_over_time(country_specific_taxa, country, sequencing_centre)
    raw_seqs_over_time = dp.raw_data_seqs_over_time(date_counts)
else:
    date_counts = dp.plot_sequences_over_time(taxa, country, sequencing_centre)
    raw_seqs_over_time = dp.raw_data_seqs_over_time(date_counts)
```

The map shows the number of sequences sampled in each admin2 region in the UK. The colour scale is the same for all four countries, but with different underlying base colours.

```python, name="map_prep", echo=False

uk_json = "%s/utils/mapping_files/gadm36_GBR_2.json" % scripts_directory
channels = "%s/utils/mapping_files/channel_islands.json" % scripts_directory
NI_json = "%s/utils/mapping_files/NI_counties.geojson" % scripts_directory

input_geojsons = [uk_json, channels, NI_json]
```

```python, name="map", include=True, echo=False, figure=True, caption="Map showing the number of sequences sampled by adm2 region"
map_output = map.make_map(input_geojsons, adm2_cleaning_file, metadata_file, summary_output, week, sequencing_centre, country, pillar2)
```

```python, name="finishing map", echo=False
if type(map_output) != bool:
    new_uncleans, mapping_data = map_output
    no_seqs = False
else:
    no_seqs = map_output
```

```python, name="uncleans", echo=False, results='tex'
if not no_seqs:
    if new_uncleans:
        print("There are some sequences with locations that are not matched to real Admin2 regions, some manual curation required.")
```




Other results modules for UK lineage analysis can be added in here if required.

<div style="page-break-after: always"></div>

## Appendix

```python, name="appendix", echo=False, results='tex'
if sequencing_centre == "" and country == "":
    print("The plot below shows the number of sequences from each country that don't have specific enough location data to plot on the map.")
```

```python, name="hack4", echo=False, results='raw'
if sequencing_centre == "" and country == "":
    print("![](" + fd + "/" + name_stem + "_map_2.png)\\")
```

Below are the raw data tables for each of the figures in the report.

**Table S1** Description of all lineages that have been circulating in the last month, and have more than 5 sequences.
```python, name="summary_table", echo=False, results='tex'
print(dataframe.to_markdown(tablefmt='grid'))
```
<div style="page-break-after: always"></div>

**Table S2** Raw data for figure two showing lags between the most recent sequence and current date for each sequencing centre
```python, name="raw", echo=False, results='tex'
if not pillar2:
    lag_df = pd.DataFrame(lag_dict)
    print(lag_df.to_markdown())
else:
    print("Table S2 is not appropriate for this report and so has been omitted.")
```
<div style="page-break-after: always"></div>

**Table S3** Raw data for figure three showing the number of admin2 regions a lineage is present in over time
```python, name="raw", echo=False,results='tex'
if not pillar2:
    print(raw_geog.to_markdown())
else:
    print("Table S3 is not appropriate for this report and so has been omitted.")
```
<div style="page-break-after: always"></div>

```python, name="is there shannon", echo=False, results='raw'
if sequencing_centre == "" and country=="" and not pillar2:
    print("**Table S4** Raw data for figure four showing the Shannon diversity per admin1 region over time")
else:
    print("Table S4 is not appropriate for this report and so has been omitted.")
```
```python,name="div_data", echo=False, results="tex"
if sequencing_centre == "" and country=="" and not pillar2:
    tidy_div = dp.tidy_div_df(div_df)
    
    print(tidy_div.to_markdown())
```

<div style="page-break-after: always"></div>

**Table S5** Raw data for figure five showing when lineages started per day, divided by singletons and non-singletons
```python, name="raw", echo=False,results='tex'
print(starts_raw.to_markdown())
```
<div style="page-break-after: always"></div>

**Table S6** Raw data for figure six showing the number of sequences taken over time.
```python, name="raw", echo=False,results='tex'
print(raw_seqs_over_time.to_markdown())
```
<div style="page-break-after: always"></div>

**Table S7** Raw data for the figure seven with the number of sequences assigned to each admin2 region.
```python, name="raw", echo=False,results='tex'
if not no_seqs:
    print(mapping_data.to_markdown())
```
<div style="page-break-after: always"></div>

```python, echo=False, fig=False, name="trees", include=True 

if input_directory != "":
    print("Trees and associated pie charts have been made and put into the figures folder")
    intro_list = tree_func.make_all_of_the_trees(input_directory, df_acctrans_counts, tree_order, intro_object_dict, taxon_dictionary)
```

```python,name="producing summary files", echo=False
writing.write_summary_files(summary_output, dataframe, omitted, week, intro_alls, timeline_df)
```
